// For Future
import 'package:flutter/foundation.dart';
import 'package:flutter/material.dart';
import 'package:firebase_core/firebase_core.dart';
import 'firebase_options.dart'; // Generated by FlutterFire CLI
import 'package:provider/provider.dart'; // For MultiProvider
import 'package:flutter_local_notifications/flutter_local_notifications.dart'; // Added for notifications
import 'package:timezone/data/latest_all.dart' as tz; // Added for timezone scheduling
import 'package:timezone/timezone.dart' as tz; // Added for timezone scheduling
import 'package:intl/intl.dart'; // Added for DateFormat

// Import Providers and BLoCs (Adjust paths if needed)
import 'package:workout_planner/resource/db_provider_interface.dart'; // Interface
import 'package:workout_planner/resource/db_provider.dart';      // Factory and global instance
import 'package:workout_planner/resource/firebase_provider.dart'; // Global instance
import 'package:workout_planner/resource/shared_prefs_provider.dart'; // Global instance
import 'package:workout_planner/bloc/routines_bloc.dart'; // Your RxDart BLoC
import 'package:workout_planner/bloc/workout_session_bloc.dart'; // Your flutter_bloc BLoC
import 'package:workout_planner/models/routine.dart'; // Needed for scheduling logic

// Import UI Pages
import 'package:workout_planner/ui/home_page.dart';
import 'package:workout_planner/ui/statistics_page.dart';
import 'package:workout_planner/ui/progress_charts.dart';
import 'package:workout_planner/ui/setting_page.dart';

// Global provider instances are created in their respective files
// (e.g., final dbProvider = createDbProvider(); in db_provider.dart)

// --- Notification Plugin Instance ---
// Create a global instance (or manage it via a provider/service locator)
final FlutterLocalNotificationsPlugin flutterLocalNotificationsPlugin =
    FlutterLocalNotificationsPlugin();

Future<void> main() async { // Make main async
  // 1. Ensure Flutter framework is ready
  WidgetsFlutterBinding.ensureInitialized();
  print('[MAIN] Flutter Binding Initialized.');

  // 2. Run the app with an initialization loader
  runApp(const InitializationLoader());
}

/// A widget that handles asynchronous initialization and shows a loading screen.
class InitializationLoader extends StatefulWidget {
  const InitializationLoader({super.key});

  @override
  _InitializationLoaderState createState() => _InitializationLoaderState();
}

class _InitializationLoaderState extends State<InitializationLoader> {
  bool _isInitialized = false;
  String? _errorMessage;

  // --- Notification Helper Methods (Defined within State class) ---

  /// Initializes the timezone database.
  Future<void> _initializeTimezone() async {
    tz.initializeTimeZones();
    // Optional: Set the default local location if needed.
    try {
      tz.setLocalLocation(tz.getLocation('Asia/Shanghai'));
       print("[MAIN] Timezone set to Asia/Shanghai");
    } catch (e) {
       print("[MAIN] Warning: Could not set local timezone 'Asia/Shanghai': $e. Using system default.");
    }
  }

  /// Initializes the FlutterLocalNotificationsPlugin.
  Future<void> _initializeNotifications() async {
    // Initialize timezones first, as it's needed for scheduling
    await _initializeTimezone();

    // --- Android Initialization ---
    const AndroidInitializationSettings initializationSettingsAndroid =
        AndroidInitializationSettings('app_icon'); // IMPORTANT: Use your app icon name

    // --- iOS/macOS Initialization ---
    final DarwinInitializationSettings initializationSettingsDarwin =
        DarwinInitializationSettings(
            onDidReceiveLocalNotification: _onDidReceiveLocalNotification, // Optional callback
            requestAlertPermission: true,
            requestBadgePermission: true,
            requestSoundPermission: true
            );

    // --- Combine Settings ---
    final InitializationSettings initializationSettings = InitializationSettings(
        android: initializationSettingsAndroid,
        iOS: initializationSettingsDarwin,
        macOS: initializationSettingsDarwin
        );

    // --- Initialize Plugin ---
    bool? initialized = await flutterLocalNotificationsPlugin.initialize(
        initializationSettings,
        onDidReceiveNotificationResponse: _onDidReceiveNotificationResponse,
        onDidReceiveBackgroundNotificationResponse: notificationTapBackground // Use top-level function
        );
    print("[MAIN] Notification plugin initialized: $initialized");

    // --- Request Permissions (Android 13+) ---
    if (defaultTargetPlatform == TargetPlatform.android) {
       final AndroidFlutterLocalNotificationsPlugin? androidImplementation =
           flutterLocalNotificationsPlugin.resolvePlatformSpecificImplementation<
               AndroidFlutterLocalNotificationsPlugin>();
       final bool? granted = await androidImplementation?.requestNotificationsPermission();
       print("[MAIN] Android Notification Permission Granted: $granted");
    }
  }

  /// Callback for when a notification is received while the app is in the foreground (iOS only).
  void _onDidReceiveLocalNotification(int id, String? title, String? body, String? payload) async {
     print("[Notification] Received foreground notification (iOS): id=$id, title=$title, payload=$payload");
  }

  /// Callback for when a user taps on a notification (app is foreground, background, or terminated).
  void _onDidReceiveNotificationResponse(NotificationResponse notificationResponse) async {
    final String? payload = notificationResponse.payload;
    print("[Notification] Tapped notification: payload=$payload");
    // TODO: Handle notification tap
  }

  // --- Notification Scheduling Logic ---
  Future<void> _scheduleRoutineNotifications() async {
    print("[Notifications] Scheduling routine notifications...");
    try {
      final routines = await dbProvider.getAllRoutines();
      print("[Notifications] Fetched ${routines.length} routines for scheduling.");

      await flutterLocalNotificationsPlugin.cancelAll();
      print("[Notifications] Cancelled all previous notifications.");

      int scheduledCount = 0;
      final tz.TZDateTime now = tz.TZDateTime.now(tz.local);

      const AndroidNotificationDetails androidPlatformChannelSpecifics =
          AndroidNotificationDetails(
              'routine_reminders',
              'Routine Reminders',
              channelDescription: 'Notifications reminding you about scheduled routines',
              importance: Importance.max,
              priority: Priority.high,
              ticker: 'ticker');
       const DarwinNotificationDetails darwinPlatformChannelSpecifics =
           DarwinNotificationDetails(
               presentAlert: true,
               presentBadge: true,
               presentSound: true,
           );
      const NotificationDetails platformChannelSpecifics =
          NotificationDetails(android: androidPlatformChannelSpecifics, iOS: darwinPlatformChannelSpecifics);

      for (final routine in routines) {
        if (routine.weekdays.isEmpty) continue;

        for (final scheduleDay in routine.weekdays) {
          tz.TZDateTime scheduledDate = _nextInstanceOfWeekday(now, scheduleDay);

          const int notificationHour = 8;
          const int notificationMinute = 0;
          scheduledDate = tz.TZDateTime(tz.local, scheduledDate.year, scheduledDate.month, scheduledDate.day, notificationHour, notificationMinute);

          if (scheduledDate.isBefore(now)) {
             scheduledDate = scheduledDate.add(const Duration(days: 7));
             print("[Notifications] Scheduled time ${scheduledDate.weekday} ${scheduledDate.hour}:${scheduledDate.minute} is past for today, scheduling for next week.");
          }

          final notificationId = (routine.id ?? 0) * 100 + scheduleDay;

          print("[Notifications] Scheduling ID $notificationId for '${routine.routineName}' on ${DateFormat('yyyy-MM-dd HH:mm').format(scheduledDate)} (Weekday: ${scheduledDate.weekday})");

          await flutterLocalNotificationsPlugin.zonedSchedule(
              notificationId,
              'Workout Reminder',
              'Time for your "${routine.routineName}" routine!',
              scheduledDate,
              platformChannelSpecifics,
              androidScheduleMode: AndroidScheduleMode.exactAllowWhileIdle,
              uiLocalNotificationDateInterpretation:
                  UILocalNotificationDateInterpretation.absoluteTime,
              matchDateTimeComponents: DateTimeComponents.dayOfWeekAndTime
              );
          scheduledCount++;
        }
      }
      print("[Notifications] Scheduled $scheduledCount routine notifications.");

    } catch (e, s) {
      print("[Notifications] Error scheduling notifications: $e\n$s");
    }
  }

  /// Calculates the next instance of a specific weekday (1=Mon, 7=Sun)
  tz.TZDateTime _nextInstanceOfWeekday(tz.TZDateTime now, int weekday) {
    tz.TZDateTime result = now;
    if (result.weekday != weekday) {
       result = result.add(Duration(days: (weekday - result.weekday + 7) % 7));
    }
     return tz.TZDateTime(tz.local, result.year, result.month, result.day);
  }

  // --- End Notification Helpers ---


  @override
  void initState() {
    super.initState();
    _initializeApp();
  }

  Future<void> _initializeApp() async {
    try {
      // 2. Initialize Firebase
      print('[MAIN] Starting Firebase initialization block...');
      FirebaseApp? app;
      try {
        if (Firebase.apps.isEmpty) {
          print('[MAIN] No Firebase apps found. Calling Firebase.initializeApp...');
          app = await Firebase.initializeApp(
            options: DefaultFirebaseOptions.currentPlatform,
          );
          print('[MAIN] Firebase.initializeApp completed successfully. App name: ${app.name}');
        } else {
          print('[MAIN] Firebase default app already exists. Getting instance...');
          app = Firebase.app();
          print('[MAIN] Using existing Firebase app: ${app.name}');
        }
        print('[MAIN] Firebase setup check completed successfully.');
      } catch (e) {
        print('[MAIN] CRITICAL: Exception caught during Firebase setup: ${e.runtimeType} - $e');
        setState(() { _errorMessage = 'Firebase setup failed:\n$e'; });
        return;
      }
      // --- End Firebase Init ---

      // 3. Initialize Local Database
      print('[MAIN] Starting DB initialization...');
      try {
        await dbProvider.initDB();
        print('[MAIN] DB initialized successfully.');
      } catch (e) {
        print('[MAIN] CRITICAL: Database initialization failed: $e');
        setState(() { _errorMessage = 'Database initialization failed:\n$e'; });
        return;
      }
      // --- End DB Init ---

      // 4. Initialize Notifications
      print('[MAIN] Initializing Notifications...');
      try {
        await _initializeNotifications(); // Call method defined above
        print('[MAIN] Notifications initialized successfully.');
        await _scheduleRoutineNotifications(); // Call method defined above
      } catch (e) {
        print('[MAIN] Warning: Notification initialization or scheduling failed: $e');
      }
      // --- End Notification Init ---

      // 5. Perform Non-Critical One-Time App Setup
      print('[MAIN] Performing initial app setup...');
      try {
        await sharedPrefsProvider.checkAndPrepareOnAppStart();
        firebaseProvider.signInSilently().then((user) {
          if (kDebugMode) print("[MAIN] Silent sign-in attempt completed. User: ${user?.uid ?? 'None'}");
        }).catchError((e) {
          if (kDebugMode) print("[MAIN] Error during silent sign-in attempt: $e");
        });
        print('[MAIN] Initial app setup complete.');
      } catch (e) {
        print('[MAIN] Warning: Error during initial app setup: $e');
      }
      // --- End App Setup ---

      setState(() {
        _isInitialized = true;
      });
    } catch (e) {
      print('[MAIN] CRITICAL: Unexpected error during initialization: $e');
      setState(() {
        _errorMessage = 'An unexpected error occurred during initialization:\n$e';
      });
    }
  }

  @override
  Widget build(BuildContext context) {
    if (_errorMessage != null) {
      return ErrorApp(error: _errorMessage!);
    }

    if (!_isInitialized) {
      return const MaterialApp(
        home: Scaffold(
          body: Center(
            child: CircularProgressIndicator(),
          ),
        ),
      );
    }

    print('[MAIN] Running App with MultiProvider...');
    return MultiProvider(
      providers: [
        Provider<DbProviderInterface>.value(value: dbProvider),
        Provider<FirebaseProvider>.value(value: firebaseProvider),
        Provider<SharedPrefsProvider>.value(value: sharedPrefsProvider),
        Provider<RoutinesBloc>(
            create: (_) {
              print('[PROVIDER] Creating RoutinesBloc...');
              final bloc = RoutinesBloc();
              bloc.fetchAllRoutines();
              bloc.fetchRecommendedRoutines();
              return bloc;
            },
            dispose: (_, bloc) {
              print('[PROVIDER] Disposing RoutinesBloc...');
              bloc.dispose();
            }
        ),
        Provider<WorkoutSessionBloc>(
            create: (context) {
              print('[PROVIDER] Creating WorkoutSessionBloc...');
              return WorkoutSessionBloc(dbProvider: context.read<DbProviderInterface>());
            },
            dispose: (_, bloc) {
              print('[PROVIDER] Disposing WorkoutSessionBloc...');
              bloc.close();
            }
        ),
      ],
      child: const MyApp(),
    );
  }
}

/// The root application widget. Sets up MaterialApp.
class MyApp extends StatelessWidget {
  const MyApp({super.key});

  @override
  Widget build(BuildContext context) {
    print("[BUILD] MyApp");
    return MaterialApp(
      theme: ThemeData(
        colorScheme: ColorScheme.fromSeed(
          seedColor: Colors.blueGrey.shade800,
          primary: Colors.blueGrey.shade800,
          secondary: Colors.deepOrangeAccent,
          brightness: Brightness.light,
        ),
        appBarTheme: AppBarTheme(
          backgroundColor: Colors.blueGrey.shade800,
          foregroundColor: Colors.white,
          elevation: 1,
        ),
        fontFamily: 'Staa',
        textTheme: const TextTheme(
          bodyMedium: TextStyle(fontSize: 16),
          headlineSmall: TextStyle(fontSize: 20, fontWeight: FontWeight.w600),
        ),
        useMaterial3: true,
      ),
      debugShowCheckedModeBanner: false,
      title: 'Workout Planner',
      home: const MainPage(),
    );
  }
}

/// The main scaffold holding the different pages via BottomNavigationBar.
class MainPage extends StatefulWidget {
  const MainPage({super.key});

  @override
  MainPageState createState() => MainPageState();
}

class MainPageState extends State<MainPage> {
  int _selectedIndex = 0;

  static const List<Widget> _widgetOptions = <Widget>[
    HomePage(),
    StatisticsPage(),
    ProgressCharts(),
    SettingPage(),
  ];

  void _onItemTapped(int index) {
    setState(() {
      _selectedIndex = index;
    });
  }

  @override
  Widget build(BuildContext context) {
    print("[BUILD] MainPage (Tab: $_selectedIndex)");
    return Scaffold(
      body: IndexedStack(
        index: _selectedIndex,
        children: _widgetOptions,
      ),
      bottomNavigationBar: BottomNavigationBar(
        items: const <BottomNavigationBarItem>[
          BottomNavigationBarItem( icon: Icon(Icons.home_outlined), activeIcon: Icon(Icons.home), label: 'Home', ),
          BottomNavigationBarItem( icon: Icon(Icons.calendar_today_outlined), activeIcon: Icon(Icons.calendar_today), label: 'Calendar', ),
          BottomNavigationBarItem( icon: Icon(Icons.show_chart_outlined), activeIcon: Icon(Icons.show_chart), label: 'Progress', ),
          BottomNavigationBarItem( icon: Icon(Icons.settings_outlined), activeIcon: Icon(Icons.settings), label: 'Settings', ),
        ],
        currentIndex: _selectedIndex,
        selectedItemColor: Theme.of(context).colorScheme.primary,
        unselectedItemColor: Colors.grey.shade600,
        showUnselectedLabels: false,
        type: BottomNavigationBarType.fixed,
        onTap: _onItemTapped,
      ),
    );
  }
}

/// A simple widget shown when critical initialization fails.
class ErrorApp extends StatelessWidget {
  final String error;
  const ErrorApp({super.key, required this.error});

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      home: Scaffold(
        backgroundColor: Colors.white,
        body: Center(
            child: Padding(
              padding: const EdgeInsets.all(24.0),
              child: Column(
                mainAxisAlignment: MainAxisAlignment.center,
                crossAxisAlignment: CrossAxisAlignment.center,
                children: [
                  const Icon(Icons.error_outline, size: 60, color: Colors.red),
                  const SizedBox(height: 20),
                  const Text('Application Error', style: TextStyle(fontSize: 24, fontWeight: FontWeight.bold)),
                  const SizedBox(height: 15),
                  Text(
                    'Failed to initialize essential services:\n\n$error',
                    textAlign: TextAlign.center,
                    style: TextStyle(color: Colors.red.shade900, height: 1.4),
                  ),
                  const SizedBox(height: 25),
                  const Text(
                      'Please close and restart the app.\nIf the problem persists, please contact support.',
                      textAlign: TextAlign.center,
                      style: TextStyle(color: Colors.grey)
                  ),
                ],
              ),
            )
        ),
      ),
    );
  }
}

/// Callback for when a user taps on a notification launched from a terminated state (background isolate).
@pragma('vm:entry-point')
void notificationTapBackground(NotificationResponse notificationResponse) {
  // handle action
  print("[Notification] Tapped notification from background: payload=${notificationResponse.payload}");
  // IMPORTANT: Keep this function minimal. Avoid heavy logic or Flutter engine interactions.
}