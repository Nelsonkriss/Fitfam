import 'dart:async'; // For Future
import 'package:flutter/foundation.dart';
import 'package:flutter/material.dart';
import 'package:firebase_core/firebase_core.dart';
import 'firebase_options.dart'; // Generated by FlutterFire CLI
import 'package:provider/provider.dart'; // For MultiProvider

// Import Providers and BLoCs (Adjust paths if needed)
import 'package:workout_planner/resource/db_provider_interface.dart'; // Interface
import 'package:workout_planner/resource/db_provider.dart';      // Factory and global instance
import 'package:workout_planner/resource/firebase_provider.dart'; // Global instance
import 'package:workout_planner/resource/shared_prefs_provider.dart'; // Global instance
import 'package:workout_planner/bloc/routines_bloc.dart'; // Your RxDart BLoC
import 'package:workout_planner/bloc/workout_session_bloc.dart'; // Your flutter_bloc BLoC

// Import UI Pages
import 'package:workout_planner/ui/home_page.dart';
import 'package:workout_planner/ui/statistics_page.dart';
import 'package:workout_planner/ui/progress_charts.dart';
import 'package:workout_planner/ui/setting_page.dart';

// Global provider instances are created in their respective files
// (e.g., final dbProvider = createDbProvider(); in db_provider.dart)

void main() async {
  // 1. Ensure Flutter framework is ready
  WidgetsFlutterBinding.ensureInitialized();
  print('[MAIN] Flutter Binding Initialized.');

  // 2. Initialize Firebase (essential service)
  print('[MAIN] Starting Firebase initialization block...');
  FirebaseApp? app; // Reference to the initialized app
  try {
    // Check if already initialized (important for hot restarts)
    if (Firebase.apps.isEmpty) {
      print('[MAIN] No Firebase apps found. Calling Firebase.initializeApp...');
      app = await Firebase.initializeApp(
        options: DefaultFirebaseOptions.currentPlatform,
      );
      print('[MAIN] Firebase.initializeApp completed successfully. App name: ${app.name}');
    } else {
      print('[MAIN] Firebase default app already exists. Getting instance...');
      app = Firebase.app(); // Get the existing default app instance
      print('[MAIN] Using existing Firebase app: ${app.name}');
    }
    print('[MAIN] Firebase setup check completed successfully.');
  } catch (e) {
    // Catch critical Firebase init errors
    print('[MAIN] CRITICAL: Exception caught during Firebase setup: ${e.runtimeType} - $e');
    runApp(ErrorApp(error: 'Firebase setup failed:\n$e'));
    return; // Stop execution if Firebase fails
  }
  // Ensure we actually have an app reference before proceeding
  if (app == null) {
    print('[MAIN] CRITICAL: Firebase app reference is null after initialization block.');
    runApp(const ErrorApp(error: 'Failed to obtain Firebase app reference.'));
    return;
  }
  // --- End Firebase Init ---

  // 3. Initialize Local Database (essential service)
  print('[MAIN] Starting DB initialization...');
  try {
    // Assumes dbProvider is a global instance created in db_provider.dart
    await dbProvider.initDB();
    print('[MAIN] DB initialized successfully.');
  } catch (e) {
    print('[MAIN] CRITICAL: Database initialization failed: $e');
    runApp(ErrorApp(error: 'Database initialization failed: $e'));
    return; // Stop execution if DB fails
  }
  // --- End DB Init ---

  // 4. Perform Non-Critical One-Time App Setup (e.g., SharedPreferences)
  print('[MAIN] Performing initial app setup...');
  try {
    // Assumes sharedPrefsProvider is a global instance
    await sharedPrefsProvider.checkAndPrepareOnAppStart();
    // Attempt silent sign-in in the background (non-blocking)
    firebaseProvider.signInSilently().then((user) {
      if (kDebugMode) print("[MAIN] Silent sign-in attempt completed. User: ${user?.uid ?? 'None'}");
    }).catchError((e) {
      if (kDebugMode) print("[MAIN] Error during silent sign-in attempt: $e");
    });
    print('[MAIN] Initial app setup complete.');
  } catch (e) {
    // Log warning but allow app to continue if non-essential setup fails
    print('[MAIN] Warning: Error during initial app setup: $e');
  }
  // --- End App Setup ---


  // 5. Run the App with Necessary Providers
  print('[MAIN] Running App with MultiProvider...');
  runApp(
    MultiProvider(
      providers: [
        // Provide global singleton instances using .value constructor
        // Ensures only one instance exists and is shared.
        Provider<DbProviderInterface>.value(value: dbProvider),
        Provider<FirebaseProvider>.value(value: firebaseProvider),
        Provider<SharedPrefsProvider>.value(value: sharedPrefsProvider),

        // Instantiate and Provide BLoCs using .create constructor
        // This ensures they are created when first needed and disposed correctly.
        Provider<RoutinesBloc>(
            create: (_) {
              print('[PROVIDER] Creating RoutinesBloc...');
              // Assumes RoutinesBloc default constructor is sufficient
              final bloc = RoutinesBloc();
              // Trigger initial data fetch immediately after creation
              bloc.fetchAllRoutines();
              bloc.fetchRecommendedRoutines();
              return bloc;
            },
            // Dispose function for RxDart BLoC (closes streams)
            dispose: (_, bloc) {
              print('[PROVIDER] Disposing RoutinesBloc...');
              bloc.dispose();
            }
        ),
        Provider<WorkoutSessionBloc>(
            create: (context) {
              print('[PROVIDER] Creating WorkoutSessionBloc...');
              // Inject DbProviderInterface dependency using context.read
              return WorkoutSessionBloc(dbProvider: context.read<DbProviderInterface>());
            },
            // Dispose function for flutter_bloc BLoC (closes bloc)
            dispose: (_, bloc) {
              print('[PROVIDER] Disposing WorkoutSessionBloc...');
              bloc.close();
            }
        ),
      ],
      child: const MyApp(), // Your root App widget
    ),
  );
}

/// The root application widget. Sets up MaterialApp.
class MyApp extends StatelessWidget {
  const MyApp({super.key});

  @override
  Widget build(BuildContext context) {
    print("[BUILD] MyApp"); // Log when App widget builds
    return MaterialApp(
      theme: ThemeData(
        colorScheme: ColorScheme.fromSeed(
          seedColor: Colors.blueGrey.shade800,
          primary: Colors.blueGrey.shade800,
          secondary: Colors.deepOrangeAccent,
          brightness: Brightness.light,
        ),
        appBarTheme: AppBarTheme(
          backgroundColor: Colors.blueGrey.shade800,
          foregroundColor: Colors.white,
          elevation: 1,
        ),
        fontFamily: 'Staa', // Ensure font asset is correctly set up
        textTheme: const TextTheme(
          bodyMedium: TextStyle(fontSize: 16),
          headlineSmall: TextStyle(fontSize: 20, fontWeight: FontWeight.w600),
        ),
        useMaterial3: true,
      ),
      debugShowCheckedModeBanner: false,
      title: 'Workout Planner',
      home: const MainPage(),
    );
  }
}

/// The main scaffold holding the different pages via BottomNavigationBar.
class MainPage extends StatefulWidget {
  const MainPage({Key? key}) : super(key: key);

  @override
  MainPageState createState() => MainPageState();
}

class MainPageState extends State<MainPage> {
  int _selectedIndex = 0; // State for the currently selected tab index

  // The widgets corresponding to each tab
  static const List<Widget> _widgetOptions = <Widget>[
    HomePage(),
    StatisticsPage(),
    ProgressCharts(),
    SettingPage(),
  ];

  // Callback function when a tab is tapped
  void _onItemTapped(int index) {
    setState(() {
      _selectedIndex = index;
    });
  }

  @override
  Widget build(BuildContext context) {
    print("[BUILD] MainPage (Tab: $_selectedIndex)"); // Log when MainPage builds
    return Scaffold(
      // Use IndexedStack to keep the state of inactive tabs alive
      body: IndexedStack(
        index: _selectedIndex,
        children: _widgetOptions,
      ),
      // Standard Bottom Navigation Bar
      bottomNavigationBar: BottomNavigationBar(
        items: const <BottomNavigationBarItem>[
          BottomNavigationBarItem( icon: Icon(Icons.home_outlined), activeIcon: Icon(Icons.home), label: 'Home', ),
          BottomNavigationBarItem( icon: Icon(Icons.calendar_today_outlined), activeIcon: Icon(Icons.calendar_today), label: 'Calendar', ),
          BottomNavigationBarItem( icon: Icon(Icons.show_chart_outlined), activeIcon: Icon(Icons.show_chart), label: 'Progress', ),
          BottomNavigationBarItem( icon: Icon(Icons.settings_outlined), activeIcon: Icon(Icons.settings), label: 'Settings', ),
        ],
        currentIndex: _selectedIndex, // Highlight the current tab
        selectedItemColor: Theme.of(context).colorScheme.primary, // Color for selected item
        unselectedItemColor: Colors.grey.shade600, // Color for inactive items
        showUnselectedLabels: false, // Hide labels for inactive items (optional)
        type: BottomNavigationBarType.fixed, // Items have fixed width, labels visible
        onTap: _onItemTapped, // Callback when item is tapped
      ),
    );
  }
}


/// A simple widget shown when critical initialization fails.
class ErrorApp extends StatelessWidget {
  final String error;
  const ErrorApp({Key? key, required this.error}) : super(key: key);

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      home: Scaffold(
        backgroundColor: Colors.white, // Simple background
        body: Center(
            child: Padding(
              padding: const EdgeInsets.all(24.0), // More padding
              child: Column(
                mainAxisAlignment: MainAxisAlignment.center,
                crossAxisAlignment: CrossAxisAlignment.center, // Center align items
                children: [
                  const Icon(Icons.error_outline, size: 60, color: Colors.red),
                  const SizedBox(height: 20),
                  const Text('Application Error', style: TextStyle(fontSize: 24, fontWeight: FontWeight.bold)),
                  const SizedBox(height: 15),
                  Text(
                    'Failed to initialize essential services:\n\n$error',
                    textAlign: TextAlign.center,
                    style: TextStyle(color: Colors.red.shade900, height: 1.4), // Increase line height
                  ),
                  const SizedBox(height: 25),
                  const Text(
                      'Please close and restart the app.\nIf the problem persists, please contact support.',
                      textAlign: TextAlign.center,
                      style: TextStyle(color: Colors.grey)
                  ),
                ],
              ),
            )
        ),
      ),
    );
  }
}